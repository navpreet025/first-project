{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOEE9dOIq0KG/6W8mDv9cly",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/navpreet025/first-project/blob/main/basics%20of%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZM1_hKtrifci",
        "outputId": "475c711f-5d9f-4594-a19f-1f2f8a0b7694"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After adding 50 and 60: [11, 12, 13, 14, 50, 60]\n",
            "After removing 11 and 13: [12, 14, 50, 60]\n",
            "Sorted in ascending order: [12, 14, 50, 60]\n",
            "Sorted in descending order: [60, 50, 14, 12]\n",
            "Is 13 in L? False\n",
            "Number of elements: 4\n",
            "Sum of all elements: 136\n",
            "Sum of odd numbers: 0\n",
            "Sum of even numbers: 136\n",
            "Sum of prime numbers: 0\n",
            "After clearing: []\n"
          ]
        }
      ],
      "source": [
        "L = [11, 12, 13, 14]\n",
        "\n",
        "# (i) Add 50 and 60 to L\n",
        "L.extend([50, 60])\n",
        "print(\"After adding 50 and 60:\", L)\n",
        "\n",
        "# (ii) Remove 11 and 13 from L\n",
        "L.remove(11)\n",
        "L.remove(13)\n",
        "print(\"After removing 11 and 13:\", L)\n",
        "\n",
        "# (iii) Sort L in ascending order\n",
        "L.sort()\n",
        "print(\"Sorted in ascending order:\", L)\n",
        "\n",
        "# (iv) Sort L in descending order\n",
        "L.sort(reverse=True)\n",
        "print(\"Sorted in descending order:\", L)\n",
        "\n",
        "# (v) Search for 13 in L\n",
        "print(\"Is 13 in L?\", 13 in L)\n",
        "\n",
        "# (vi) Count number of elements\n",
        "print(\"Number of elements:\", len(L))\n",
        "\n",
        "# (vii) Sum all elements\n",
        "print(\"Sum of all elements:\", sum(L))\n",
        "\n",
        "# (viii) Sum all ODD numbers\n",
        "odd_sum = sum(x for x in L if x % 2 != 0)\n",
        "print(\"Sum of odd numbers:\", odd_sum)\n",
        "\n",
        "# (ix) Sum all EVEN numbers\n",
        "even_sum = sum(x for x in L if x % 2 == 0)\n",
        "print(\"Sum of even numbers:\", even_sum)\n",
        "\n",
        "# (x) Sum all PRIME numbers\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "prime_sum = sum(x for x in L if is_prime(x))\n",
        "print(\"Sum of prime numbers:\", prime_sum)\n",
        "\n",
        "# (xi) Clear all elements\n",
        "L.clear()\n",
        "print(\"After clearing:\", L)\n",
        "\n",
        "# (xii) Delete L\n",
        "del L\n",
        "# print(L)  # This will raise NameError as L is deleted"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1:5.6, 2:7.8, 3:6.6, 4:8.7, 5:7.7}\n",
        "\n",
        "# (i) Add new entry key=8, value=8.8\n",
        "D[8] = 8.8\n",
        "print(\"After adding 8:8.8:\", D)\n",
        "\n",
        "# (ii) Remove key=2\n",
        "del D[2]\n",
        "print(\"After removing key 2:\", D)\n",
        "\n",
        "# (iii) Check if key 6 is present\n",
        "print(\"Is key 6 present?\", 6 in D)\n",
        "\n",
        "# (iv) Count number of elements\n",
        "print(\"Number of elements:\", len(D))\n",
        "\n",
        "# (v) Sum all values\n",
        "print(\"Sum of all values:\", sum(D.values()))\n",
        "\n",
        "# (vi) Update value of key 3 to 7.1\n",
        "D[3] = 7.1\n",
        "print(\"After updating key 3:\", D)\n",
        "\n",
        "# (vii) Clear the dictionary\n",
        "D.clear()\n",
        "print(\"After clearing:\", D)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lYiXYT7ckOfA",
        "outputId": "4beff698-ac09-4ae3-a7aa-3be7489e93a7"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After adding 8:8.8: {1: 5.6, 2: 7.8, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "After removing key 2: {1: 5.6, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "Is key 6 present? False\n",
            "Number of elements: 5\n",
            "Sum of all values: 37.4\n",
            "After updating key 3: {1: 5.6, 3: 7.1, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "After clearing: {}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "S1 = {10, 20, 30, 40, 50, 60}\n",
        "S2 = {40, 50, 60, 70, 80, 90}\n",
        "\n",
        "# (i) Add 55 and 66 to S1\n",
        "S1.add(55)\n",
        "S1.add(66)\n",
        "print(\"After adding 55 and 66 to S1:\", S1)\n",
        "\n",
        "# (ii) Remove 10 and 30 from S1\n",
        "S1.discard(10)\n",
        "S1.discard(30)\n",
        "print(\"After removing 10 and 30 from S1:\", S1)\n",
        "\n",
        "# (iii) Check if 40 is present in S1\n",
        "print(\"Is 40 in S1?\", 40 in S1)\n",
        "\n",
        "# (iv) Union of S1 and S2\n",
        "print(\"Union of S1 and S2:\", S1.union(S2))\n",
        "\n",
        "# (v) Intersection of S1 and S2\n",
        "print(\"Intersection of S1 and S2:\", S1.intersection(S2))\n",
        "\n",
        "# (vi) S1 - S2\n",
        "print(\"S1 - S2:\", S1.difference(S2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u_FBqDvKldsq",
        "outputId": "89542ce5-abf5-4e7a-9afa-97351e3791e4"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After adding 55 and 66 to S1: {50, 66, 20, 55, 40, 10, 60, 30}\n",
            "After removing 10 and 30 from S1: {50, 66, 20, 55, 40, 60}\n",
            "Is 40 in S1? True\n",
            "Union of S1 and S2: {66, 70, 40, 80, 50, 20, 55, 90, 60}\n",
            "Intersection of S1 and S2: {40, 50, 60}\n",
            "S1 - S2: {66, 20, 55}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "# (i) Print 100 random strings (length 6-8)\n",
        "def random_string():\n",
        "    length = random.randint(6, 8)\n",
        "    return ''.join(random.choice(string.ascii_letters) for _ in range(length))\n",
        "\n",
        "print(\"100 random strings:\")\n",
        "for _ in range(100):\n",
        "    print(random_string())\n",
        "\n",
        "# (ii) Print all prime numbers between 600 and 800\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "print(\"\\nPrime numbers between 600 and 800:\")\n",
        "for num in range(600, 801):\n",
        "    if is_prime(num):\n",
        "        print(num, end=\" \")\n",
        "\n",
        "# (iii) Print numbers between 100 and 1000 divisible by 7 and 9\n",
        "print(\"\\n\\nNumbers between 100 and 1000 divisible by 7 and 9:\")\n",
        "for num in range(100, 1001):\n",
        "    if num % 7 == 0 and num % 9 == 0:\n",
        "        print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ENiGBUPTli0r",
        "outputId": "10bfc9d0-db1c-44a2-ce12-082f2dc72bf1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100 random strings:\n",
            "jcvluLb\n",
            "VXkpNtg\n",
            "MdIlQMDP\n",
            "fHoMxW\n",
            "sotIYlL\n",
            "rbYOlSeH\n",
            "vjCoxvEB\n",
            "jcMYRBp\n",
            "MxHYftn\n",
            "empMSkDu\n",
            "QNYwINM\n",
            "ixeNOdy\n",
            "utzqgJ\n",
            "WhyeEeb\n",
            "rrNljXA\n",
            "xnJHrO\n",
            "odMMTU\n",
            "PzFkMqg\n",
            "ZzIEUEmC\n",
            "BptKuia\n",
            "jJLcwgU\n",
            "mdpryA\n",
            "IyXSaD\n",
            "lTnzvf\n",
            "JksdECNM\n",
            "ebkWovKk\n",
            "mIibtxv\n",
            "OojbuV\n",
            "ypguJqmD\n",
            "hRPRjYy\n",
            "xdRrSo\n",
            "XNKhCUXA\n",
            "QAyyJgh\n",
            "wgeKzP\n",
            "tBLAgclB\n",
            "WUFDNYIE\n",
            "eVPIoeV\n",
            "ixVRgli\n",
            "yckJKkl\n",
            "XZehIjs\n",
            "zBYnQQ\n",
            "fDxHKYT\n",
            "fWQrHe\n",
            "bJAAALR\n",
            "Hnglsp\n",
            "IsuKYr\n",
            "gNuqZDU\n",
            "DVrwTDX\n",
            "YVGDOOlh\n",
            "oFprkZ\n",
            "CfYVEaOA\n",
            "GgqFuoE\n",
            "pIsvarNA\n",
            "yLKJwZ\n",
            "ZIdvQdFh\n",
            "BkNDyS\n",
            "etdRaaf\n",
            "rKtepv\n",
            "uSYrrNL\n",
            "VEiidciJ\n",
            "exLjyby\n",
            "hCYPaKe\n",
            "VgdWodQP\n",
            "WRXESbS\n",
            "YpNjSLwo\n",
            "fhiBMZ\n",
            "HxGqfgZp\n",
            "uqXytlL\n",
            "yJRooKY\n",
            "RrNZhID\n",
            "nVxhUt\n",
            "yTuAYj\n",
            "dJnVndM\n",
            "XurcQD\n",
            "KqgEqU\n",
            "pmhSlQ\n",
            "mxvWjh\n",
            "fvIzyGPW\n",
            "IVjedxCT\n",
            "mJGAWDVQ\n",
            "CDLOzrI\n",
            "YmOrTA\n",
            "rlDrpgs\n",
            "edasBIKO\n",
            "sPLunogK\n",
            "FCdZlCxS\n",
            "poVayX\n",
            "dRPEHr\n",
            "iYpAVJ\n",
            "zjJqdGU\n",
            "vjRwvkz\n",
            "bZZONc\n",
            "jVdHqtMA\n",
            "JFKXJFZ\n",
            "FacjvQa\n",
            "YtxDcy\n",
            "xflNgzO\n",
            "mhYBAAb\n",
            "QXkCzW\n",
            "vTYAwfEL\n",
            "\n",
            "Prime numbers between 600 and 800:\n",
            "601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 \n",
            "\n",
            "Numbers between 100 and 1000 divisible by 7 and 9:\n",
            "126 189 252 315 378 441 504 567 630 693 756 819 882 945 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# Create two lists of 10 random numbers between 10 and 30\n",
        "list1 = [random.randint(10, 30) for _ in range(10)]\n",
        "list2 = [random.randint(10, 30) for _ in range(10)]\n",
        "\n",
        "print(\"List 1:\", list1)\n",
        "print(\"List 2:\", list2)\n",
        "\n",
        "# (i) Common numbers\n",
        "common = set(list1) & set(list2)\n",
        "print(\"\\nCommon numbers:\", common)\n",
        "\n",
        "# (ii) Unique numbers in both lists\n",
        "unique = set(list1) ^ set(list2)\n",
        "print(\"Unique numbers in both lists:\", unique)\n",
        "\n",
        "# (iii) Minimum in both lists\n",
        "print(\"Min in list1:\", min(list1), \"Min in list2:\", min(list2))\n",
        "\n",
        "# (iv) Maximum in both lists\n",
        "print(\"Max in list1:\", max(list1), \"Max in list2:\", max(list2))\n",
        "\n",
        "# (v) Sum of both lists\n",
        "print(\"Sum of list1:\", sum(list1), \"Sum of list2:\", sum(list2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WrMlhSk7lugH",
        "outputId": "d6202a8a-1469-4df7-a54d-84a391fa6713"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List 1: [28, 19, 19, 10, 29, 29, 11, 10, 14, 17]\n",
            "List 2: [15, 26, 18, 23, 22, 23, 30, 10, 16, 26]\n",
            "\n",
            "Common numbers: {10}\n",
            "Unique numbers in both lists: {11, 14, 15, 16, 17, 18, 19, 22, 23, 26, 28, 29, 30}\n",
            "Min in list1: 10 Min in list2: 10\n",
            "Max in list1: 29 Max in list2: 30\n",
            "Sum of list1: 186 Sum of list2: 209\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# Create list of 100 random numbers between 100 and 900\n",
        "numbers = [random.randint(100, 900) for _ in range(100)]\n",
        "\n",
        "# (i) All odd numbers\n",
        "odd_numbers = [x for x in numbers if x % 2 != 0]\n",
        "print(\"Odd numbers:\", odd_numbers)\n",
        "print(\"Count of odd numbers:\", len(odd_numbers))\n",
        "\n",
        "# (ii) All even numbers\n",
        "even_numbers = [x for x in numbers if x % 2 == 0]\n",
        "print(\"\\nEven numbers:\", even_numbers)\n",
        "print(\"Count of even numbers:\", len(even_numbers))\n",
        "\n",
        "# (iii) All prime numbers\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "prime_numbers = [x for x in numbers if is_prime(x)]\n",
        "print(\"\\nPrime numbers:\", prime_numbers)\n",
        "print(\"Count of prime numbers:\", len(prime_numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mLp9incbmB-k",
        "outputId": "60cc75d5-9002-460c-ec91-07e035c9c591"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Odd numbers: [553, 323, 537, 725, 821, 639, 827, 669, 491, 355, 345, 899, 137, 645, 621, 185, 139, 363, 429, 161, 265, 861, 687, 741, 713, 747, 751, 413, 125, 685, 721, 325, 115, 555, 217, 347, 103, 447, 443, 511, 455, 845, 835, 891, 809, 221, 501, 563, 161, 773, 383, 489, 861, 153, 305]\n",
            "Count of odd numbers: 55\n",
            "\n",
            "Even numbers: [476, 620, 512, 468, 650, 786, 862, 346, 250, 554, 724, 776, 762, 500, 658, 610, 622, 518, 396, 156, 810, 756, 878, 564, 466, 470, 200, 638, 130, 228, 406, 702, 846, 208, 706, 446, 476, 468, 542, 652, 466, 796, 460, 884, 252]\n",
            "Count of even numbers: 45\n",
            "\n",
            "Prime numbers: [821, 827, 491, 137, 139, 751, 347, 103, 443, 809, 563, 773, 383]\n",
            "Count of prime numbers: 13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\"}\n",
        "\n",
        "with open(\"dictionary_output.txt\", \"w\") as file:\n",
        "    for key, value in D.items():\n",
        "        file.write(f\"{key}, {value}\\n\")\n",
        "\n",
        "print(\"Dictionary written to file successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NfZja1zEmKpc",
        "outputId": "97f0272d-2764-425c-a7ca-581be5605a9d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dictionary written to file successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n",
        "\n",
        "with open(\"list_lengths.txt\", \"w\") as file:\n",
        "    for item in L:\n",
        "        file.write(f\"{item}, {len(item)}\\n\")\n",
        "\n",
        "print(\"List element lengths written to file successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S5YfHKLGmYg3",
        "outputId": "e6923a45-4d6e-4b22-fe10-c6442abe07f8"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List element lengths written to file successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "def random_string():\n",
        "    length = random.randint(10, 15)\n",
        "    return ''.join(random.choice(string.ascii_letters) for _ in range(length))\n",
        "\n",
        "with open(\"random_strings.txt\", \"w\") as file:\n",
        "    for _ in range(100):\n",
        "        file.write(random_string() + \"\\n\")\n",
        "\n",
        "print(\"100 random strings written to file successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8LJJFyahm2nv",
        "outputId": "08e9f9d1-b437-43ef-e785-1eddd58f788f"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100 random strings written to file successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "with open(\"primes_600_800.txt\", \"w\") as file:\n",
        "    for num in range(600, 801):\n",
        "        if is_prime(num):\n",
        "            file.write(f\"{num}\\n\")\n",
        "\n",
        "print(\"Prime numbers between 600 and 800 written to file successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uTzAgnPum_4y",
        "outputId": "5ad64982-2903-43ea-ef22-f802da4b6bf5"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prime numbers between 600 and 800 written to file successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "# Your program code here\n",
        "# For example:\n",
        "total = 0\n",
        "for i in range(1, 1000001):\n",
        "    total += i\n",
        "\n",
        "end_time = time.time()\n",
        "execution_time = end_time - start_time\n",
        "\n",
        "print(f\"Program executed in {execution_time:.4f} seconds\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0JoFRTbLnG-z",
        "outputId": "69a4f67a-19c4-4ef5-a629-41147f697ca9"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Program executed in 0.2006 seconds\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sizes = [5000, 10000, 15000, 20000, 25000]\n",
        "times = []\n",
        "\n",
        "for size in sizes:\n",
        "    data = [random.randint(1, 100000) for _ in range(size)]\n",
        "\n",
        "    start_time = time.time()\n",
        "    data.sort()\n",
        "    end_time = time.time()\n",
        "\n",
        "    elapsed = end_time - start_time\n",
        "    times.append(elapsed)\n",
        "    print(f\"Sorted {size} elements in {elapsed:.4f} seconds\")\n",
        "\n",
        "# Plotting the graph\n",
        "plt.plot(sizes, times, marker='o')\n",
        "plt.title('Sorting Time Analysis')\n",
        "plt.xlabel('Number of Elements')\n",
        "plt.ylabel('Time Taken (seconds)')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "Z6NIAvvZnZtS",
        "outputId": "e135eabc-ae97-43c5-df4c-8bd030f3d9b1"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted 5000 elements in 0.0013 seconds\n",
            "Sorted 10000 elements in 0.0024 seconds\n",
            "Sorted 15000 elements in 0.0052 seconds\n",
            "Sorted 20000 elements in 0.0072 seconds\n",
            "Sorted 25000 elements in 0.0081 seconds\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "students = {\n",
        "    \"Alice\": [85, 90, 78, 92, 88],\n",
        "    \"Bob\": [76, 82, 79, 81, 84],\n",
        "    \"Charlie\": [92, 95, 88, 90, 94],\n",
        "    \"Diana\": [78, 82, 80, 85, 79],\n",
        "    \"Eve\": [88, 92, 85, 90, 87]\n",
        "}\n",
        "\n",
        "# Calculate averages\n",
        "averages = {name: sum(marks)/len(marks) for name, marks in students.items()}\n",
        "\n",
        "# Find max and min averages\n",
        "max_student = max(averages.items(), key=lambda x: x[1])\n",
        "min_student = min(averages.items(), key=lambda x: x[1])\n",
        "\n",
        "print(f\"Student with maximum average: {max_student[0]} ({max_student[1]:.2f})\")\n",
        "print(f\"Student with minimum average: {min_student[0]} ({min_student[1]:.2f})\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SYzFuXXUnlyl",
        "outputId": "26ecd8ac-cea3-4ec8-c93e-e12a653ae1dd"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Student with maximum average: Charlie (91.80)\n",
            "Student with minimum average: Bob (80.40)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IpUafdicnvG5"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}